# -*- coding: utf-8 -*-
"""K3_iris-2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1I8LVxJc6RLx3ifgPRBD36gJbl6_XAjkF

Benötigte Module importieren und Datei laden. Die ersten Zeilen werden ausgegeben.
"""

import tensorflow as tf
#import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder

path = "/Users/student-sbs/PycharmProjects/KNN1/iris.csv"
data = pd.read_csv(path, delimiter=',')
print(data.head())

"""Daten vorbereiten."""

# Was soll vorhergesagt werden? Spaltenname in Variable speichern.
col_name = 'species'

# Zeichenkette in OHE umwandeln, Ergebnis in neuer Tabelle
col = pd.get_dummies(data[col_name], dtype=float)

# Aus der ursprünglichen Tabelle werden die species entfernt
data = data.drop([col_name], axis = 1)
#Somit zwei Tabellen vorhanden

"""KNN aufbauen"""

# Aus den zwei Tabellen vier Tabellen erzeugen
train_data, test_data, train_col, test_col = train_test_split(data,col, test_size=0.2, random_state=42)

# Aufbau KNN
model = tf.keras.Sequential()
model.add(tf.keras.Input(shape=(4,)))
model.add(tf.keras.layers.Dense(32, activation=tf.nn.sigmoid))
model.add(tf.keras.layers.Dense(64, activation=tf.nn.sigmoid))
model.add(tf.keras.layers.Dense(3, activation=tf.nn.softmax))
# Konfiguration des Lernprozesses
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
# categorical_crossentropy = Zielwerte als One-Hot-Vektoren (z.B.: [1,0,0]; [0,1,0],...).
# was man hier nimmt hängt von den Klassen ab. Eigentlich sollte man hier 
# sparse_categorical_crossentrophy wegen Ganzzahl-Zielwerten nehmen.

"""Trainieren"""

# 50 Durchläufe
model.fit(train_data, train_col, epochs=50)

"""Testen"""

test_loss, test_acc = model.evaluate(test_data, test_col)
print('Test accuracy:', test_acc)
